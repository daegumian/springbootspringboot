<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.coding404.myweb.product.service.ProductMapper">

    <insert id="productRegist" parameterType="ProductVO">
        INSERT INTO product (prod_enddate,
                             prod_writer,
                             prod_name,
                             prod_price,
                             prod_count,
                             prod_discount,
                             prod_purchase_yn,
                             prod_content,
                             prod_comment,
                             prod_category)<!-- 카테고리 컬럼 추가 -->
        VALUES (#{prod_enddate},
                #{prod_writer},
                #{prod_name},
                #{prod_price},
                #{prod_count},
                #{prod_discount},
                #{prod_purchase_yn},
                #{prod_content},
                #{prod_comment},
                #{prod_category})
    </insert>
    
    <!-- 파일 업로드 -->
    <insert id="productFileRegist">
    
    	<!-- 
    	selectKey는 insert, update, delete 필요한 키값을 조회해서 가져오는 기능
    	selectKey절 안에는 select문장을 적는데, 반드시 단인행이 나와야한다.
    	
    	insert를 하기 실행 or insert를 한 후에 실행
    	order="BEFORE order="AFTER"
    	
    	keyProperty
    	vo객체 전달, select한 결과를 맵핑할 setter메서드명
    	
    	resultType
    	select한 결과에 대한 반환타입
    	-->
    
    	<selectKey order="BEFORE" keyProperty="prod_id" resultType="int">
    		select max(prod_id) as prod_id from product where prod_writer = #{prod_writer}
    	</selectKey>
    
    	insert into product_upload(filename,
    							    filepath,
    							    uuid,
    							    prod_id,
    							    prod_writer)
    		   values(#{filename},
    		   		  #{filepath},
    		   		  #{uuid},
    		   		  #{prod_id},
    		   		  #{prod_writer})
    
    </insert>

	<!-- 
	동적쿼리 if, choose, foreach 문장
	동적쿼리절에는 vo의 getter or map key가 전달됨
	 -->
    <select id="getList" resultType="ProductVO">
       
	 select a.*,
	    	b.category_nav
	 from product a
	 left join (SELECT CONCAT(A1.GROUP_ID, A1.CATEGORY_ID) AS CATEGORY_KEY,
					   CASE A1.CATEGORY_PARENT_LV
									WHEN 0 THEN A1.CATEGORY_DETAIL_NM
						            WHEN 1 THEN CONCAT(A2.CATEGORY_DETAIL_NM, '>', A1.CATEGORY_DETAIL_NM)
						            WHEN 2 THEN CONCAT(A3.CATEGORY_DETAIL_NM, '>', A2.CATEGORY_DETAIL_NM, '>', A1.CATEGORY_DETAIL_NM)
					   END AS category_nav
	 FROM product_category A1
	 LEFT JOIN product_category A2
	 ON A1.CATEGORY_PARENT_LV = A2.CATEGORY_LV AND A1.CATEGORY_DETAIL_PARENT_LV = A2.CATEGORY_DETAIL_LV AND A1.GROUP_ID = A2.GROUP_ID
	 LEFT JOIN product_category A3
	 ON A2.CATEGORY_PARENT_LV = A3.CATEGORY_LV AND A2.CATEGORY_DETAIL_PARENT_LV = A3.CATEGORY_DETAIL_LV) b
	 on a.PROD_CATEGORY = b.CATEGORY_KEY
     where prod_writer = #{writer}
        
        <if test = "cri.searchName != '' and cri.searchName != null ">
        	and prod_name like concat('%',#{cri.searchName},'%')
        </if>
        <if test = "cri.searchContent != '' and cri.searchContent != null ">
			and prod_content like concat('%', #{cri.searchContent}, '%')
        </if>
        <if test = "cri.startDate != '' and cri.startDate != null ">
		<!-- 부등호가 있으면 [CDATA[]]로 감싸주는게 좋다 -->
		<![CDATA[and prod_enddate >= #{cri.startDate}]]>
        </if>
        <if test = "cri.endDate != '' and cri.endDate != null ">
		<!-- 부등호가 있으면 [CDATA[]]로 감싸주는게 좋다 -->
		<![CDATA[and prod_enddate <= #{cri.endDate}]]>
        </if>
        
        order by 
        <if test="cri.searchPrice == 'asc' ">
        	prod_price asc,
        </if>
        <if test="cri.searchPrice == 'desc' ">
        	prod_price desc,
        </if>
        
        prod_id desc
        limit #{cri.pageStart}, #{cri.amount} <!--게터 문구 다시 생각 -->
        
    </select>
    
    <select id = "getTotal" resultType="int">
    	select count(*) as total
    	from product
    	where prod_writer = #{writer}
    	<if test = "cri.searchName != '' and cri.searchName != null ">
        	and prod_name like concat('%',#{cri.searchName},'%')
        </if>
        <if test = "cri.searchContent != '' and cri.searchContent != null ">
			and prod_content like concat('%', #{cri.searchContent}, '%')
        </if>
        <if test = "cri.startDate != '' and cri.startDate != null ">
		<!-- 부등호가 있으면 [CDATA[]]로 감싸주는게 좋다 -->
		<![CDATA[and prod_enddate >= #{cri.startDate}]]>
        </if>
        <if test = "cri.endDate != '' and cri.endDate != null ">
		<!-- 부등호가 있으면 [CDATA[]]로 감싸주는게 좋다 -->
		<![CDATA[and prod_enddate <= #{cri.endDate}]]>
        </if>
    </select>
    

    <select id="getDetail" resultType="ProductVO">
        SELECT * 
        
        FROM product a
		
		left join (SELECT CONCAT(A1.GROUP_ID, A1.CATEGORY_ID) AS CATEGORY_KEY,
		       CASE A1.CATEGORY_PARENT_LV
					WHEN 0 THEN A1.CATEGORY_DETAIL_NM
		            WHEN 1 THEN CONCAT(A2.CATEGORY_DETAIL_NM, '>', A1.CATEGORY_DETAIL_NM)
		            WHEN 2 THEN CONCAT(A3.CATEGORY_DETAIL_NM, '>', A2.CATEGORY_DETAIL_NM, '>', A1.CATEGORY_DETAIL_NM)
		       END AS category_nav
		FROM product_category A1
		LEFT JOIN product_category A2
		ON A1.CATEGORY_PARENT_LV = A2.CATEGORY_LV AND A1.CATEGORY_DETAIL_PARENT_LV = A2.CATEGORY_DETAIL_LV AND A1.GROUP_ID = A2.GROUP_ID
		LEFT JOIN product_category A3
		ON A2.CATEGORY_PARENT_LV = A3.CATEGORY_LV AND A2.CATEGORY_DETAIL_PARENT_LV = A3.CATEGORY_DETAIL_LV) b
		on a.PROD_CATEGORY = b.CATEGORY_KEY
        
        WHERE prod_id = #{prod_id}
    </select>

    <update id="productUpdate" parameterType="ProductVO">
        UPDATE product
        SET prod_enddate = #{prod_enddate},
            prod_name = #{prod_name},
            prod_price = #{prod_price},
            prod_count = #{prod_count},
            prod_discount = #{prod_discount},
            prod_purchase_yn = #{prod_purchase_yn},
            prod_content = #{prod_content},
            prod_comment = #{prod_comment}
        WHERE prod_id = #{prod_id}
    </update>
    
    <delete id="productDelete"> <!-- 단일값은 바로 사용가능! -->
    	delete from product where prod_id = #{prod_id}
    </delete>
    
    <!-- 카테고리처리 -->
    <!-- 처음 가져올 때 sql문 -->
    <select id="getCategory" resultType="CategoryVO">
    	select *
    	from product_category where category_lv = 1
    
    </select>
    
    <!-- 2단,3단 가져올 때 sql문 -->
    
    <select id="getCategoryChild" resultType="CategoryVO">
    
    	select *
    	from product_category
    	where group_id = #{group_id} <!-- 깨알 #{group_id}는 게터명만 쓴 것 -->
    	and category_parent_lv = #{category_lv}
    	and category_detail_parent_lv = #{category_detail_lv}
    	
    
    </select>
    
    <!-- 이미지 불러오기 -->
    
    <select id="getAjaxImg" resultType="ProductUploadVO">
    	select * from product_upload where prod_id = #{prod_id}
    		  
    
    </select>

</mapper>
